@page "/Account/Register"

@rendermode InteractiveServer

@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserService UserService

<PageTitle>Registrarse</PageTitle>
<RadzenNotification />

<div class="page-wrapper">
    <div class="row justify-content-center zoom-container">
        <div>
			<div class="content-container" style="background-color: #f5f5f5; border-radius: 10px; padding: 20px; color: #399ce7; box-shadow: 0px 0px 35px #399ce7; ">
				<EditForm Model="Input" OnValidSubmit="CreateUser">
					<DataAnnotationsValidator />
					<div style="text-align: center;">
						<img src="/bootstrap/img/ejemplo.png" width="90" height="90">
						<h3 class="fw-bold text-center">Crea una cuenta nueva</h3>
					</div>
					<hr />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.NombreUsuario" class="form-control" autocomplete="username" aria-required="true" placeholder="Juan123" />
                        <label for="email">Nombre de Usuario</label>
                        <ValidationMessage For="() => Input.NombreUsuario" class="text-danger" />
                    </div>
                     <div class="row">
                         <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Nombre" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Nombre" />
                                <label for="password">Nombre</label>
                                <ValidationMessage For="() => Input.Nombre" class="text-danger" />
                            </div>
                         </div>
                         <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Apellido" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Apellido" />
                                <label for="confirm-password">Apellido</label>
                                <ValidationMessage For="() => Input.Apellido" class="text-danger" />
                            </div>
                         </div>
                     </div>
                     <div class="row">
                         <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Cedula" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Cedula" />
                                <label for="confirm-password">Cedula</label>
                                <ValidationMessage For="() => Input.Cedula" class="text-danger" />
                            </div>
                         </div> 
                         <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Telefono" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Telefono" />
                                <label for="confirm-password">Telefono</label>
                                <ValidationMessage For="() => Input.Telefono" class="text-danger" />
                            </div>
                         </div>
                     </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="new-password" aria-required="true" placeholder="examplo@email.com" />
                        <label for="password">Correo</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    
                    <div class="form-floating mb-3">
                        <InputText type="@tipo" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="contraseña" />
                        <label for="confirm-password">Contraseña</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="@tipo" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="username" aria-required="true" placeholder="contraseña" />
                        <label for="email">Confirmar Contraseña</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <div class="row fs-5 align-content-center">
                        <div class="col-7 m-2">
                            <label class="form-check-label"> <input type="checkbox" class="form-check-input fs-5" @onclick="CambiarTipo" />  Mostrar contraseña</label>
                        </div>
                    </div>

					<div class="text-center">
						<button type="submit" class="w-100 btn btn-lg btn-primary">Registrarse</button>
					</div>

                    <p class="text-center">
                        <a href="/Account/Login">INICIAR SESI&Oacute;N</a>
                    </p>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@code {

    private InputModel Input { get; set; } = new InputModel();
    public string tipo = "password";

    private async Task CreateUser()
    {
        if (await UserService.EmailExisteAsync(Input.Email))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Correo Ya Existe",
                    Duration = 4000
                };
            NotificationService.Notify(mensaje);
            return;
        }
        if (Input.Password != Input.ConfirmPassword)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Las Contraseñas Deben Ser Iguales",
                    Duration = 4000
                };
            NotificationService.Notify(mensaje);
            return;
        }
        if (await UserService.GetNickNameAsync(Input.NombreUsuario!))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El Nombre De Usuario Existe",
                    Duration = 4000
                };
            NotificationService.Notify(mensaje);
            return;
        }

        var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                Nombre = Input.Nombre,
                Apellido = Input.Apellido,
                PhoneNumber = Input.Telefono,
                Cedula = Input.Cedula,
                NickName = Input.NombreUsuario
            };
        var result = await UserService.CreateUserAsync(user, Input.Password);
        if (result.Succeeded)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito",
                    Detail = "Usuario Creado",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
            Input = new InputModel();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("Account/Login");
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Usuario No Creado",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
        }

        if (await UserService.CedulaExistAsync(Input.Cedula!))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La Cédula Ya Existe",
                    Duration = 4000
                };
            NotificationService.Notify(mensaje);
            return;
        }
    }

	public void CambiarTipo()
	{
		if (tipo == "password")
		{
			tipo = "text";
		}
		else
		{
			tipo = "password";
		}
	}

	private sealed class InputModel
	{
		[Required(ErrorMessage = "Campo requerido")]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[StringLength(100, ErrorMessage = "El intervalo de caracteres debe estar entre 8-100", MinimumLength = 8)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[Display(Name = "Name")]
		public string? Nombre { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[Display(Name = "Apellido")]
		public string? Apellido { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[Display(Name = "Telefono")]
        [RegularExpression(@"^\d{3}-\d{3}-\d{4}$", ErrorMessage = "El número de teléfono debe tener el formato 999-999-9999")]
		public string? Telefono { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[Display(Name = "Cedula")]
        [RegularExpression(@"^\d{3}-\d{7}-\d{1}$", ErrorMessage = "La Cedula debe tener el formato 999-9999999-9")]
		public string? Cedula { get; set; } = "";

        [Required(ErrorMessage = "Campo requerido")]
		[Display(Name = "Nombre Usuario")]
		public string? NombreUsuario { get; set; } = "";
	}
}


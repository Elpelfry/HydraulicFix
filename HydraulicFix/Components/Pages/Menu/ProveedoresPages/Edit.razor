@page "/Proveedores/Edit/{ProveedorId:int}"

@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject IServer<Proveedores> proveedoresService
@inject NotificationService notificationService
@rendermode InteractiveServer


<PageTitle>Editar</PageTitle>

<EditForm Model="proveedor" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <RadzenNotification />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="fw-bold">Editar Proveedor</h3>
            </div>
            <div class="card-body">
                <div>
                    <label class="fw-bold">Nombre</label>
                    <InputText @bind-Value="proveedor.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => proveedor.Nombre)" />
                </div>
                <div>
                    <label class="fw-bold">Tel&eacute;fono</label>
                    <InputText @bind-Value="proveedor.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => proveedor.Telefono)" />
                </div>
            </div>
            <div class="card-footer justify-content-center d-flex">
                <button type="submit" class="btn btn-primary bi bi-floppy text-white"> Guardar<i class="oi oi-document"></i></button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public Proveedores proveedor = new Proveedores();
    [Parameter]
    public int ProveedorId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        proveedor = await proveedoresService.GetObject(ProveedorId);
    }

    public async Task Guardar()
    {
        var existe = await proveedoresService.GetObjectByCondition(x => x.Nombre!.ToLower() == proveedor.Nombre!.ToLower() && x.ProveedorId != ProveedorId);
        if (existe.Any())
        {
            var mensaje1 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El proveedor ya existe",
                    Duration = 5000
                };
            notificationService.Notify(mensaje1);
            return;
        }
        existe = await proveedoresService.GetObjectByCondition(x => x.Telefono == proveedor.Telefono && x.ProveedorId != ProveedorId);
        if (existe.Any())
        {
            var mensaje1 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El Numero de Teléfono ya existe",
                    Duration = 5000
                };
            notificationService.Notify(mensaje1);
            return;
        }

        var guardar = await proveedoresService.UpdateObject(proveedor);
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado",
                Detail = "Proveedor actualizado con éxito",
                Duration = 5000
            };
        notificationService.Notify(mensaje);
        await Task.Delay(2000);
        navigationManager.NavigateTo("Proveedores");
    }
}

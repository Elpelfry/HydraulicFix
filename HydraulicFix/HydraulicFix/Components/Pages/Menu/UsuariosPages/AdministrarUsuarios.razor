@page "/AdministrarUsuarios"

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer
@inject IServerAsp<ApplicationUser> usuariosService
@inject IdentityUserService identityUserService
@inject IServerAsp<IdentityRole> rolesService
@inject IServerAsp<IdentityUserRole<string>> userRolesService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationState
<PageTitle>Administrar Usuarios</PageTitle>

<div class="container">
    <RadzenNotification />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3 class="fw-bold text-center">Usuarios</h3>
        </div>
        <div class="card-body">
            <div class="container">
                <div style="margin-left: 4px;">
                    <div class="row">
                        <label>Filtrar por:</label>
                        <div class="col-4">
                            <InputSelect @bind-Value="Opcion" class="form-select" disabled="@bandera">
                                <option value="1">Nombre de Usuario</option>
                                <option value="2">Admin</option>
                                <option value="3">Cliente</option>
                                <option value="4">Todo</option>
                            </InputSelect>
                        </div>
                        <div class="col-auto">

                            @if (Opcion == 1)
                            {
                                <div class="input-group justify-content-end">
                                    <InputText @bind-Value="usuario.NickName" class="form-control"></InputText>
                                    <div class="input-group-append">
                                        <button class="btn btn-info" @onclick="Buscar" disabled="@bandera">
                                            <img src="/bootstrap/img/buscar.png" alt="Buscar" style="width: 24px; height: 24px; margin-right: 2px;">
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (Opcion != 1 && Opcion > 0)
                            {
                                <div class="input-group justify-content-end">
                                    <button class="btn btn-info" @onclick="Buscar" disabled="@bandera">
                                        <img src="/bootstrap/img/buscar.png" alt="Buscar" style="width: 24px; height: 24px; margin-right: 2px;">
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <table class="table table-light table-hover table-striped table-bordered text-center">
                <thead>
                    <tr class="fw-bold">

                        <th scope="col">Nombre de Usuario</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Apellido</th>
                        <th scope="col">Email</th>
                        <th scope="col">Rol</th>
                        <th scope="col">Cambiar Rol</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in usuarios)
                    {
                        if(usuarioAuth.Id != item.Id)
                        {
                            var itemrol = userRoles.FirstOrDefault(x => x.UserId == item.Id);
                            var rol = (roles.FirstOrDefault(x => x.Id == itemrol!.RoleId))!;
                            <tr>
                                <td>@item.NickName</td>
                                <td>@item.Nombre</td>
                                <td>@item.Apellido</td>
                                <td>@item.Email</td>
                                @if (rol != null)
                                {
                                    <td>@rol.Name</td>
                                    if (rol.Name != "Cliente")
                                    {
                                        <td>
                                            <button class="btn btn-info fw-bold text-light" @onclick=@(() => CambiarRol(item,"Cliente")) disabled="@bandera"><i class="bi bi-arrow-left-right"></i> Cambiar a Cliente</button>
                                        </td>
                                    }
                                    else if (rol.Name != "Admin")
                                    {
                                        <td>
                                            <button class="btn btn-info fw-bold text-light" @onclick=@(() => CambiarRol(item,"Admin")) disabled="@bandera"><i class="bi bi-arrow-left-right"></i> Cambiar a Admin</button>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@code {
    public bool bandera = false;
    public List<ApplicationUser> usuarios { get; set; } = new List<ApplicationUser>();
    public ApplicationUser usuario { get; set; } = new ApplicationUser();
    public IdentityRole role { get; set; } = new IdentityRole();
    public List<IdentityRole> roles { get; set; } = new List<IdentityRole>();
    public List<IdentityUserRole<string>> userRoles { get; set; } = new List<IdentityUserRole<string>>();

    public int Opcion { get; set; }
    public AuthenticationState authState { get; set; } = default!;
    public ApplicationUser usuarioAuth { get; set; } = new ApplicationUser();
    protected override async Task OnInitializedAsync()
    {
        usuarios = await usuariosService.GetAllObject();
        roles = await rolesService.GetAllObject();
        userRoles = await userRolesService.GetAllObject();
        authState = await AuthenticationState.GetAuthenticationStateAsync();
        usuarioAuth = (usuarios.FirstOrDefault(u => u.UserName == authState.User.Identity?.Name))!;
    }

    public async Task Buscar()
    {
        if(Opcion == 1 && !string.IsNullOrEmpty(usuario.NickName))
        {
            var user0 = await usuariosService.GetAllObject();
            usuarios = user0.Where(v => v.NickName!.ToLower().Contains(usuario.NickName!.ToLower())).ToList();
        }
        else if(Opcion == 2)
        {
            usuarios = new List<ApplicationUser>();
            var users1 = await usuariosService.GetAllObject();
            foreach (var item in users1)
            {
                var role = await identityUserService.GetRoleAsync(item);
                if(role?.Name == "Admin")
                {
                    usuarios.Add(item);
                }
            }
        }
        else if(Opcion == 3)
        {
            usuarios = new List<ApplicationUser>();
            var users2 = await usuariosService.GetAllObject();
            foreach (var item in users2)
            {
                var role = await identityUserService.GetRoleAsync(item);
                if(role?.Name == "Cliente")
                {
                    usuarios.Add(item);
                }
            }
        }
        else if(Opcion == 4)
        {
            usuarios = await usuariosService.GetAllObject();
        }
    }

    public async Task CambiarRol(ApplicationUser user, string newrole)
    {
        bandera = true;
        var resultado = await identityUserService.ChangeUserRoleAsync(user, newrole);
        if (resultado)
        {

            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Rol Cambiado",
                    Detail = $"El rol del usuario {user.NickName} ha sido cambiado correctamente a {newrole}",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
        }
        else
        {
            bandera = false;
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Rol no cambiado",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
            return;
        }
        await Task.Delay(3200);
        NavigationManager.NavigateTo("AdministrarUsuarios", forceLoad: true);
    }
}

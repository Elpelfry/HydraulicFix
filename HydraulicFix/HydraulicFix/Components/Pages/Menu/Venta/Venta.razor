@page "/Venta"

@attribute [Authorize(Roles = "Admin")]
@inject IServer<Reparaciones> reparacionesService
@inject IServer<Estados> estadosService
@inject IServerAsp<ApplicationUser> usuariosService
@inject IServer<Ventas> ventasService
@inject IServer<Configuraciones> configuracionesService
@inject IServer<Condiciones> condicionesService
@inject IServer<MetodoPagos> metodosPagosService
@inject IServer<Productos> productosService
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationState
@rendermode InteractiveServer

<RadzenNotification />
<PageTitle>Venta</PageTitle>
<div class="container" style="max-height: 650px;">
    <div class="card shadow-lg" style="background:#0174BE">
        <div class="card-header">
            <h3 class="fw-bold text-center">Venta</h3>
        </div>
        <div class="row">
            <div class="col col-5">
                <div class="card shadow-lg">
                    <div class="card-header-sub" style="background: #26577C">
                        <h3 class="fw-bold text-center">Compra</h3>
                    </div>
                    <div class="table-responsive" style="max-height: 320px;">
                        <table class="table table-bordered">
                            <thead style="background: #26577C" class="text-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th class="text-center">Precio</th>
                                    <th class="text-center">Cantidad</th>
                                    <th class="text-center">ITBIS</th>
                                    <th class="text-center">Remover</th>
                                </tr>
                            </thead>
                            <tbody style="overflow-y: auto;">
                                @foreach (var item in venta.VentasDetalle)
                                {
                                    var producto = productos.FirstOrDefault(x => x.ProductoId == item.ProductoId);
                                    <tr>
                                        <td>@producto!.Nombre</td>
                                        <td class="text-center">@producto.Precio.ToString("N2")</td>
                                        <td class="text-center">@item.Cantidad.ToString("00")</td>
                                        <td class="text-center">@producto.ITBIS.ToString("N2")%</td>
                                        <td class="justify-content-center text-center">
                                            <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick=@(() => RemoverProducto(producto) )></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        <div class="col-auto">
                            <label class="form-label"><strong>Sub-Total:</strong> RD$ @venta.SubTotal.ToString("N2")</label><br />
                            <label class="form-label"><strong>ITBIS:</strong> RD$ @venta.ITBS.ToString("N2")</label><br />
                            <label class="form-label"><strong>Total:</strong> RD$ @venta.Total.ToString("N2")</label>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-success bi-cash-stack" @onclick=@(() => Vender = true)> Venta</button>
                            <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="NuevaVenta"> Cancelar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col col-7 justify-content-end">
                <div class="card shadow-lg">
                    <div class="card-header-sub" style="background: #26577C">
                        <h3 class="fw-bold text-center">Productos</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <label>Buscar:</label>
                            <div class="col-3">
                                <InputSelect @bind-Value="Opcion" class="form-select">
                                    <option value="1">C&oacute;digo</option>
                                    <option value="2">Nombre</option>
                                    <option value="3">Todo</option>
                                </InputSelect>
                            </div>
                            <div class="col-auto">
                                @switch (Opcion)
                                {
                                    case 1:
                                        <div class="input-group justify-content-end">
                                            <InputText @bind-Value="producto.Codigo" class="form-control" min="0"></InputText>
                                            <div class="input-group-append">
                                                <button class="btn btn-info" @onclick="Buscar">
                                                    <img src="/bootstrap/img/buscar.png" alt="Buscar" style="width: 24px; height: 24px; margin-right: 2px;">
                                                </button>
                                            </div>
                                        </div>
                                        break;
                                    case 2:
                                        <div class="input-group justify-content-end">
                                            <InputText @bind-Value="producto.Nombre" class="form-control"></InputText>
                                            <div class="input-group-append">
                                                <button class="btn btn-info" @onclick="Buscar">
                                                    <img src="/bootstrap/img/buscar.png" alt="Buscar" style="width: 24px; height: 24px; margin-right: 2px;">
                                                </button>
                                            </div>
                                        </div>
                                        break;

                                    case 3:
                                        <div class="input-group justify-content-end">
                                            <button class="btn btn-info" @onclick="Buscar">
                                                <img src="/bootstrap/img/buscar.png" alt="Buscar" style="width: 24px; height: 24px; margin-right: 2px;">
                                            </button>
                                        </div>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive" style="max-height: 450px;">
                        <table class="table table-bordered text-center">
                            <thead style="background: #26577C" class="text-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>ITBIS</th>
                                    <th>Descuento</th>
                                    <th>Agregar</th>
                                </tr>
                            </thead>
                            <tbody style="overflow-y:auto;">
                                @foreach (var item in productos)
                                {
                                    var producto = productos.FirstOrDefault(x => x.ProductoId == item.ProductoId);
                                    <tr>
                                        <td style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@item.Nombre</td>
                                        <td>@item.Precio.ToString("N2")</td>
                                        <td>
                                            <div class="input-group text-center">
                                                <button type="button" class="btn btn-success bi bi-dash" @onclick=@(() => DisminuirCantidad(item))></button>
                                                <label class="form-control text-center">@item.Cantidad.ToString("00")</label>
                                                <button type="button" class="btn btn-success bi bi-plus" @onclick=@(() => AumentarCantidad(item))></button>
                                            </div>
                                        </td>
                                        <td>@item.ITBIS.ToString("N2")%</td>
                                        <td>@item.Descuento.ToString("N2")%</td>
                                        <td class="justify-content-center"><button type="button" class="btn btn-muted text-white" @onclick=@(() => AgregarProducto(producto!)) style="background:#2ca4f2"><i class="bi bi-plus "></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@if (Vender)
{
    <div class="modal d-block opaco">
        @* <div style="width: 55rem;" class="position-fixed top-50 start-50 translate-middle">

    <div class="modal-content" style="border-radius: 35px;">

    <RadzenNotification />
    <div class="card-header text-white bg-gradient" style="height: 35px; border-radius: 30px 30px 0px 0px;">
    <h4 class="fs-6 fw-bold"><img style="width: 20px; height: 20px;" src="/bootstrap/img/venta.png" /> Venta</h4>
    <div class="text-end d-flex justify-content-end align-items-end" style="margin-top: -30px;">
    <button class="btn btn-danger" style=" background-color: red; border: none; width: 20px; height: 20px; margin-left: 3px" @onclick="CerrarVenta"></button>
    </div>
    </div>

    <div class="modal-body">
    <div class="row">
    <div class="col-4">
    <label class="form-label"><strong>Sub-Total:</strong></label>
    <label class="form-control">RD$ @venta.SubTotal.ToString("N2")</label>
    </div>
    <div class="col-4">
    <label class="form-label"><strong>ITBIS:</strong></label>
    <label class="form-control">RD$ @venta.ITBS.ToString("N2")</label>
    </div>
    <div class="col-4">
    <label class="form-label"><strong>Total:</strong></label>
    <label class="form-control">RD$ @venta.Total.ToString("N2")</label>
    </div>
    <div class="col-6">
    <label class="fw-bold">Condici&oacute;n:</label>
    <InputSelect @bind-Value="venta.CondicionId" class="form-select">
    @foreach (var item in condiciones)
    {
    <option value="@item.CondicionId">@item.Nombre</option>
    }
    </InputSelect>
    </div>
    <div class="col-6">
    @if (venta.CondicionId == 2)
    {
    <label class="fw-bold">Metodo de Pago:</label>
    <InputSelect @bind-Value="venta.MetodoPagoId" class="form-select">
    @foreach (var item in metodosPagos)
    {
    <option value="@item.MetodoPagoId">@item.Nombre</option>
    }
    </InputSelect>

    }
    </div>


    @if (usuario.Nombre != null && reparacion.ReparacionId > 0)
    {
    <div class="col-12">
    <label class="form-control fw-bold text-center">@usuario.Nombre @usuario.Apellido</label>
    </div>
    }
    else
    {
    <div class="col-6">
    <label class="fw-bold">Cedula:</label>
    <div class="input-group">
    <InputText @bind-Value="usuario!.Cedula" class="form-control" placeholder="Cedula del Cliente"></InputText>
    <button class="btn btn-info" @onclick="BuscarUsuario">Buscar</button>
    </div>
    </div>
    <div class="col-6">
    @if (usuario.Cedula != "" && usuario.Nombre != null)
    {
    <label class="fw-bold">Nombre de Cliente:</label>
    <label class="form-control fw-bold">@usuario.Nombre @usuario.Apellido</label>
    }
    </div>
    }

    @if (venta.CondicionId == 2 && venta.MetodoPagoId == 2)
    {
    <EditForm Model="input" OnValidSubmit="RealizarVenta">
    <DataAnnotationsValidator />
    <div class="col-4">
    <label class="fw-bold">Numero de Tarjeta:</label>
    <InputText @bind-Value="input.NumeroTarjeta" class="form-control"></InputText>
    <ValidationMessage For="@(() => input.NumeroTarjeta)" />
    </div>
    <div class="col-4">
    <label class="fw-bold">Numero de Seguridad:</label>
    <InputText @bind-Value="input.NumeroSeguridad" class="form-control"></InputText>
    <ValidationMessage For="@(() => input.NumeroSeguridad)" />
    </div>
    <div class="col-4">
    <label class="fw-bold">Fecha de Expiraci&oacute;n:</label>
    <InputDate @bind-Value="input.FechaExpiracion" class="form-control"></InputDate>
    <ValidationMessage For="@(() => input.FechaExpiracion)" />
    </div>
    </EditForm>
    }
    else if(venta.CondicionId == 2 && venta.MetodoPagoId == 1)
    {
    <div class="col-6">
    <EditForm Model="venta.Recibido" OnValidSubmit="RealizarVenta">
    <DataAnnotationsValidator />
    <label class="fw-bold">Recibido:</label>
    <InputNumber @bind-Value="venta.Recibido" class="form-control" min="0.01"></InputNumber>
    <ValidationMessage For="@(() => venta.Recibido)" />
    </EditForm>
    </div>
    }


    </div>
    </div>
    </div>
    </div> *@

        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="background:#399ce7 ">
                    <h5 class="modal-title fw-bold text-white"><img style="width: 20px; height: 20px;" src="/bootstrap/img/venta.png" /> Venta</h5>
                    <button type="button" class="btn bg-danger text-white" @onclick="CerrarVenta">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">

                        @if (usuario.Nombre != null && reparacion.ReparacionId > 0)
                        {
                            <div class="col-12">
                                <label class="form-control fw-bold text-center">@usuario.Nombre @usuario.Apellido</label>
                            </div>
                        }
                        else
                        {
                            <div class="col-6">
                                <label class="fw-bold">Cedula:</label>
                                <div class="input-group">
                                    <InputText @bind-Value="usuario!.Cedula" class="form-control" placeholder="Cedula del Cliente"></InputText>
                                    <button class="btn btn-info" @onclick="BuscarUsuario" style="background: #0174BE">Buscar</button>
                                </div>
                            </div>
                            <div class="col-6">
                                @if (usuario.Cedula != "" && usuario.Nombre != null)
                                {
                                    <label class="fw-bold">Nombre de Cliente:</label>
                                    <label class="form-control fw-bold">@usuario.Nombre @usuario.Apellido</label>
                                }
                            </div>
                        }
                        <div class="col-6">
                            <label class="fw-bold">Condici&oacute;n:</label>
                            <InputSelect @bind-Value="venta.CondicionId" class="form-select">
                                @foreach (var item in condiciones)
                                {
                                    <option value="@item.CondicionId">@item.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-6">
                            @if (venta.CondicionId == 2)
                            {
                                <label class="fw-bold">Metodo de Pago:</label>
                                <InputSelect @bind-Value="venta.MetodoPagoId" class="form-select">
                                    @foreach (var item in metodosPagos)
                                    {
                                        <option value="@item.MetodoPagoId">@item.Nombre</option>
                                    }
                                </InputSelect>

                            }
                        </div>




                        @if (venta.CondicionId == 2 && venta.MetodoPagoId == 2)
                        {
                            <EditForm Model="input" OnValidSubmit="RealizarVenta">
                                <DataAnnotationsValidator />

                                <div class="col-12">
                                    <label class="fw-bold">Numero de Tarjeta:</label>
                                    <div class="input-group">
                                        <InputText @bind-Value="input.NumeroTarjeta" class="form-control">
                                        </InputText>

                                        <div class="input-group-append">
                                            <span class="input-group-text">
                                                <img src="/bootstrap/img/mastercard.svg" class="img-fluid" alt="Mastercard Logo" style="width: 25px; height: 25px;">
                                                <img src="/bootstrap/img/visa.svg" class="img-fluid" alt="Visa Logo" style="width: 25px; height: 25px;">
                                                <img src="/bootstrap/img/amex.svg" class="img-fluid" alt="Visa Logo" style="width: 25px; height: 25px;">
                                            </span>
                                        </div>

                                    </div>
                                </div>
                                <ValidationMessage For="@(() => input.NumeroTarjeta)" class="alert alert-danger" />
                                <div class="col-12">
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="fw-bold">Numero de Seguridad:</label>
                                            <div class="input-group">
                                                <InputText @bind-Value="input.NumeroSeguridad" class="form-control"></InputText>

                                                <div class="input-group-append">
                                                    <span class="input-group-text">
                                                        <img src="/bootstrap/img/cvv_card.svg" class="img-fluid" alt="Mastercard Logo" style="width: 25px; height: 25px;">
                                                    </span>
                                                </div>

                                            </div>

                                        </div>

                                        <div class="col-6">
                                            <label class="fw-bold">Fecha de Expiraci&oacute;n:</label>


                                            <InputDate @bind-Value="input.FechaExpiracion" class="form-control"></InputDate>


                                        </div>
                                        <ValidationMessage For="@(() => input.NumeroSeguridad)" class="alert alert-danger" />
                                        
                                        @if(input.FechaExpiracion <= DateTime.Now)
                                        {
                                            var validationMessage = ValidateFechaExpiracion(input.FechaExpiracion);
                                            if (validationMessage != null)
                                            {
                                                <div class="alert alert-info" role="alert">@validationMessage</div>
                                                
                                            }
                                        }
                                    </div>
                                </div>

                            </EditForm>
                        }
                        else if (venta.CondicionId == 2 && venta.MetodoPagoId == 1)
                        {
                            <div class="col-12">
                                <EditForm Model="venta.Recibido" OnValidSubmit="RealizarVenta">
                                    <DataAnnotationsValidator />
                                    <label class="fw-bold">Recibido:</label>
                                    <InputNumber @bind-Value="venta.Recibido" class="form-control" min="0.01"></InputNumber>
                                    <ValidationMessage For="@(() => venta.Recibido)" />
                                </EditForm>
                            </div>
                        }
                        <div class="col-4">
                            <label class="form-label"><strong>Sub-Total:</strong></label>
                            <label class="form-control">RD$ @venta.SubTotal.ToString("N2")</label>
                        </div>
                        <div class="col-4">
                            <label class="form-label"><strong>ITBIS:</strong></label>
                            <label class="form-control">RD$ @venta.ITBS.ToString("N2")</label>
                        </div>
                        <div class="col-4">
                            <label class="form-label"><strong>Total:</strong></label>
                            <label class="form-control">RD$ @venta.Total.ToString("N2")</label>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>

}




@code {
    [Parameter]
    public int ReparacionId { get; set; }
    public int Opcion { get; set; }
    private bool estaPresionado = false;
    public bool Vender { get; set; } = false;
    public List<Productos> productos { get; set; } = new List<Productos>();
    public Ventas venta { get; set; } = new Ventas();
    public Productos producto { get; set; } = new Productos();
    private Input input { get; set; } = new();
    public ApplicationUser usuario { get; set; } = new ApplicationUser();
    public List<MetodoPagos> metodosPagos { get; set; } = new List<MetodoPagos>();
    public List<Condiciones> condiciones { get; set; } = new List<Condiciones>();
    public Reparaciones reparacion { get; set; } = new Reparaciones();
    public Configuraciones configuracion { get; set; } = new Configuraciones();

    protected override async Task OnInitializedAsync()
    {
        metodosPagos = await metodosPagosService.GetObjectByCondition(p => true);
        condiciones = await condicionesService.GetObjectByCondition(p => true);
        productos = await productosService.GetObjectByCondition(p => true && p.Cantidad != 0);
        productos.ForEach(item => item.Cantidad = 1);
        var conf = await configuracionesService.GetObjectByCondition(c => true);
        configuracion = conf.FirstOrDefault()!;
        venta.Fecha = DateTime.Now;
        input.FechaExpiracion = DateTime.Now;
        usuario.Cedula = "";
        venta.ConfiguracionId = configuracion.ConfiguracionId;
        if (ReparacionId > 0)
        {
            reparacion = await reparacionesService.GetObject(ReparacionId);
            if (reparacion.ClienteId != null)
                usuario = await usuariosService.GetObject(reparacion.ClienteId);
            await AgregarDetalle(reparacion.ReparacionDetalle);
            venta.ClienteId = usuario.Id;
            Vender = true;
        }

    }

    public async Task Buscar()
    {
        switch (Opcion)
        {
            case 1:
                productos = await productosService.GetObjectByCondition(p => p.Codigo == producto.Codigo && p.Cantidad != 0);
                productos.ForEach(item => item.Cantidad = 1);
                break;
            case 2:
                productos = await productosService.GetObjectByCondition(p => p.Nombre!.ToLower().Contains(producto.Nombre!.ToLower()) && p.Cantidad != 0);
                productos.ForEach(item => item.Cantidad = 1);
                break;
            case 3:
                productos = await productosService.GetObjectByCondition(p => true && p.Cantidad != 0);
                productos.ForEach(item => item.Cantidad = 1);
                break;
        }
    }

    public async Task AgregarProducto(Productos prod)
    {
        var detalle = venta.VentasDetalle.FirstOrDefault(x => x.ProductoId == prod.ProductoId);
        var producto = await productosService.GetObject(prod.ProductoId);
        if (detalle != null)
        {
            if ((detalle.Cantidad + prod.Cantidad) <= producto!.Cantidad)
            {
                double valor = (producto.Precio * prod.Cantidad);
                valor -= (valor * ((int)producto.Descuento / 100.0f));
                venta.SubTotal += valor;
                double itebis = (valor * (producto.ITBIS / 100.0f));
                venta.ITBS += itebis;
                valor += itebis;
                venta.Total += valor;
                venta.VentasDetalle.FirstOrDefault(x => x.ProductoId == prod.ProductoId)!.Cantidad += prod.Cantidad;
                prod.Cantidad = 1;
                return;
            }
            var mennsajes = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No hay suficiente cantidad de este producto",
                    Duration = 5000
                };
            notificationService.Notify(mennsajes);
            prod.Cantidad = 1;
            return;
        }
        if (producto != null && producto.Cantidad >= prod.Cantidad)
        {
            double valor = (producto.Precio * prod.Cantidad);
            valor -= (valor * ((int)producto.Descuento / 100.0f));
            venta.SubTotal += valor;
            double itebis = (valor * (producto.ITBIS / 100.0f));
            venta.ITBS += itebis;
            valor += itebis;
            venta.Total += valor;
            venta.VentasDetalle.Add(new VentasDetalle
                {
                    ProductoId = producto.ProductoId,
                    Cantidad = prod.Cantidad
                });
            prod.Cantidad = 1;
            return;
        }
        var mennsaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No hay suficiente cantidad de este producto",
                Duration = 5000
            };
        notificationService.Notify(mennsaje);
        prod.Cantidad = 1;
    }

    public async Task RemoverProducto(Productos prod)
    {
        var producto = await productosService.GetObject(prod.ProductoId);
        var detalle = venta.VentasDetalle.FirstOrDefault(x => x.ProductoId == producto.ProductoId);
        double valor = (producto!.Precio * detalle!.Cantidad);
        valor -= (valor * ((int)producto.Descuento / 100.0f));
        venta.SubTotal -= valor;
        double itebis = (valor * (producto.ITBIS / 100.0f));
        venta.ITBS -= itebis;
        valor += itebis;
        venta.Total -= valor;
        venta.VentasDetalle.Remove(detalle);
    }

    public void AumentarCantidad(Productos prod)
    {
        prod.Cantidad++;

    }
    public void DisminuirCantidad(Productos prod)
    {
        if (prod.Cantidad > 1)
        {
            prod.Cantidad--;
        }

    }
    public void NuevaVenta()
    {
        venta = new Ventas();
        venta.VentasDetalle = new List<VentasDetalle>();
        venta.Fecha = DateTime.Now;
    }

    public void CerrarVenta()
    {
        Vender = false;
    }

    private sealed class Input
    {
        [Required(ErrorMessage = "El número de la tarjeta es requerido")]
        [RegularExpression(@"^[0-9]{16}$", ErrorMessage = "El número de tarjeta debe tener 16 dígitos")]
        [Display(Name = "Numero de la Tarjeta")]
        public string? NumeroTarjeta { get; set; }

        [Required(ErrorMessage = "El número de seguridad es requerido")]
        [RegularExpression(@"^[0-9]+$", ErrorMessage = "El número de seguridad solo puede contener dígitos")]
        [StringLength(4, MinimumLength = 3, ErrorMessage = "El número de seguridad debe tener entre 3 y 4 dígitos")]
        [Display(Name = "Numero de Seguridad")]
        public string? NumeroSeguridad { get; set; }

        [Required(ErrorMessage = "Es requerido")]
        [Display(Name = "Fecha de Expiración")]
        public DateTime FechaExpiracion { get; set; } 
    }

    public async Task AgregarDetalle(ICollection<ReparacionesDetalle> detalle)
    {
        foreach (var item in detalle)
        {
            var producto = await productosService.GetObject(item.ProductoId);
            if (producto != null)
            {
                await AgregarProducto(producto);
            }
        }
    }

    public async Task BuscarUsuario()
    {
        var usuarios = await usuariosService.GetAllObject();
        usuario = usuarios.FirstOrDefault(c => c.Cedula == usuario.Cedula)!;
        if (usuario == null)
        {
            usuario!.Nombre = "";
            usuario.Apellido = "";
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No Existe este Usuario",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            return;
        }
        venta.ClienteId = usuario.Id;
    }

    public async Task RealizarVenta()
    {
        if (venta.CondicionId == 1)
        {

        }
        else
        {
            if (venta.MetodoPagoId == 1)
            {
                if (venta.Recibido < venta.Total)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "El monto recibido no puede ser menor al total",
                            Duration = 5000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
                venta.Devuelta = venta.Recibido - venta.Total;
            }
            else
            {

            }
        }
    }

    private string ValidateFechaExpiracion(DateTime fecha)
    {
        if (fecha <= DateTime.Now)
        {
            return "La fecha de expiración debe ser posterior a la fecha actual.";
        }
        return null!;
    }
}

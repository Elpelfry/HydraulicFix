@page "/Account/Register"

@rendermode InteractiveServer
<PageTitle>Registro</PageTitle>

@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
<RadzenNotification />
@inject IdentityUserService UserService


<div style="width: 35rem; position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%);">
    <EditForm Model="Input" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />
        <h2>Create a new account.</h2>
        <hr />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.NombreUsuario" class="form-control" autocomplete="username" aria-required="true" placeholder="Juan123" />
            <label for="email">Nombre de Usuario</label>
            <ValidationMessage For="() => Input.NombreUsuario" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="new-password" aria-required="true" placeholder="examplo@email.com" />
            <label for="password">Correo</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="@tipo" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="contraseña" />
            <label for="confirm-password">Contraseña</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="@tipo" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="username" aria-required="true" placeholder="contraseña" />
            <label for="email">Confirmar Contraseña</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Nombre" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Nombre" />
            <label for="password">Nombre</label>
            <ValidationMessage For="() => Input.Nombre" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Apellido" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Apellido" />
            <label for="confirm-password">Apellido</label>
            <ValidationMessage For="() => Input.Apellido" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Cedula" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Cedula" />
            <label for="confirm-password">Cedula</label>
            <ValidationMessage For="() => Input.Cedula" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Telefono" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Telefono" />
            <label for="confirm-password">Telefono</label>
            <ValidationMessage For="() => Input.Telefono" class="text-danger" />
        </div>
        <div class="row fs-4">
            <div class="col-7">
                <label class="form-check-label"> <input type="checkbox" class="form-check-input fs-4" @onclick="CambiarTipo" />  Mostrar contraseña</label>
            </div>
        </div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
    </EditForm>
</div>

@code {

    private InputModel Input { get; set; } = new();
    public string tipo = "password";

    private async Task CreateUser()
    {
        if (await UserService.EmailExisteAsync(Input.Email))
        {
            var mensaje = new NotificationMessage { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = "Correo Ya Existe", 
                Duration = 4_000 };
            NotificationService.Notify(mensaje);
            return;
        }
        if (Input.Password != Input.ConfirmPassword)
        {
            var mensaje = new NotificationMessage { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = "Las Contraseñas Deben Ser Iguales", 
                Duration = 4_000 };
            NotificationService.Notify(mensaje);
            return;
        }
        if (await UserService.GetNickNameAsync(Input.NombreUsuario!))
        {
            var mensaje = new NotificationMessage { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = "El Nombre De Usuario Existe", 
                Duration = 4_000 };
            NotificationService.Notify(mensaje);
            return;
        }

        var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                Nombre = Input.Nombre,
                Apellido = Input.Apellido,
                PhoneNumber = Input.Telefono,
                Cedula = Input.Cedula,
                NickName = Input.NombreUsuario
            };
        var result = await UserService.CreateUserAsync(user, Input.Password);
        if (result.Succeeded)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito",
                    Detail = "Usuario Creado",
                    Duration = 5_000
                };
            NotificationService.Notify(mensaje);
            Input = new InputModel();
            await Task.Delay(3_000);
            NavigationManager.NavigateTo("Account/Login");
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Usuario No Creado",
                    Duration = 5_000
                };
            NotificationService.Notify(mensaje);
        }
    }

    public void CambiarTipo()
    {
        if (tipo == "password")
        {
            tipo = "text";
        }
        else
        {
            tipo = "password";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "El intervalo de caracteres debe estar entre 8-100", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Name")]
        public string? Nombre { get; set; } = "";

        [Required]
        [Display(Name = "Apellido")]
        public string? Apellido { get; set; } = "";

        [Required]
        [Display(Name = "Telefono")]
        [RegularExpression(@"^[0-9]{10}$", ErrorMessage = "El número de teléfono debe tener 10 dígitos")]
        public string? Telefono { get; set; } = "";

        [Required]
        [Display(Name = "Cedula")]
        [RegularExpression(@"^[0-9]{11}$", ErrorMessage = "La cédula debe tener 11 dígitos")]
        public string? Cedula { get; set; } = "";

        [Required]
        [Display(Name = "Nombre Usuario")]
        public string? NombreUsuario { get; set; } = "";
    }
}
@page "/Account/Register"

@rendermode InteractiveServer

@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserService UserService

<PageTitle>Registrarse</PageTitle>
<RadzenNotification />

<div class="page-wrapper">
	<div class="row justify-content-center">
		<div>
			<div class="content-container" style="background-color: #f5f5f5; border-radius: 10px; padding: 20px; color: #399ce7; box-shadow: 0px 0px 35px #399ce7; margin-top: 50px;">
				<EditForm Model="Input" OnValidSubmit="CreateUser">
					<DataAnnotationsValidator />
					<div style="text-align: center;">
						<img src="/bootstrap/img/ejemplo.png" width="90" height="90">
						<h3 class="fw-bold text-center">Crea una cuenta nueva</h3>
					</div>
					<hr />

					<ValidationSummary class="text-danger" />

					<div class="form-floating">
						<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="n" />
						<label for="email">Correo</label>
						<ValidationMessage For="() => Input.Email" class="text-danger" />
					</div>

					<div class="form-floating mb-3">
						<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" placeholder="password" />
						<label for="password">Contraseña</label>
						<ValidationMessage For="() => Input.Password" class="text-danger" />
					</div>

					<div class="form-floating mb-3">
						<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="password" />
						<label for="confirm-password">Confirmar Contraseña</label>
						<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
					</div>

					<div class="text-center">
						<button type="submit" class="w-100 btn btn-lg btn-primary">Registrarse</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@code {

	private InputModel Input { get; set; } = new();
	public string tipo = "password";

	private async Task CreateUser()
	{
		if (await UserService.EmailExisteAsync(Input.Email))
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Correo Ya Existe",
					Duration = 4_000
				};
			NotificationService.Notify(mensaje);
			return;
		}
		if (Input.Password != Input.ConfirmPassword)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Las Contraseñas Deben Ser Iguales",
					Duration = 4_000
				};
			NotificationService.Notify(mensaje);
			return;
		}
		if (await UserService.GetNickNameAsync(Input.NombreUsuario!))
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "El Nombre De Usuario Existe",
					Duration = 4_000
				};
			NotificationService.Notify(mensaje);
			return;
		}

		var user = new ApplicationUser
			{
				UserName = Input.Email,
				Email = Input.Email,
				Nombre = Input.Nombre,
				Apellido = Input.Apellido,
				PhoneNumber = Input.Telefono,
				Cedula = Input.Cedula,
				NickName = Input.NombreUsuario
			};
		var result = await UserService.CreateUserAsync(user, Input.Password);
		if (result.Succeeded)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Exito",
					Detail = "Usuario Creado",
					Duration = 5_000
				};
			NotificationService.Notify(mensaje);
			Input = new InputModel();
			await Task.Delay(3_000);
			NavigationManager.NavigateTo("Account/Login");
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Usuario No Creado",
					Duration = 5_000
				};
			NotificationService.Notify(mensaje);
		}
	}

	public void CambiarTipo()
	{
		if (tipo == "password")
		{
			tipo = "text";
		}
		else
		{
			tipo = "password";
		}
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "El intervalo de caracteres debe estar entre 8-100", MinimumLength = 8)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[Display(Name = "Name")]
		public string? Nombre { get; set; } = "";

		[Required]
		[Display(Name = "Apellido")]
		public string? Apellido { get; set; } = "";

		[Required]
		[Display(Name = "Telefono")]
		[RegularExpression(@"^[0-9]{10}$", ErrorMessage = "El número de teléfono debe tener 10 dígitos")]
		public string? Telefono { get; set; } = "";

		[Required]
		[Display(Name = "Cedula")]
		[RegularExpression(@"^[0-9]{11}$", ErrorMessage = "La cédula debe tener 11 dígitos")]
		public string? Cedula { get; set; } = "";

		[Required]
		[Display(Name = "Nombre Usuario")]
		public string? NombreUsuario { get; set; } = "";
	}
}

